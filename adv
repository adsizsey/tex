from collections import defaultdict, Counter
import numpy as np
import math
import pandas as pd

# Use already-loaded variables:
# tokenizer, dataset, id_to_label

token_freq = Counter()
token_label_map = defaultdict(Counter)
label_sequences = set()
label_ngrams = Counter()
sequence_lengths = []

for input_ids, labels in zip(dataset["input_ids"], dataset["labels"]):
    tokens = tokenizer.convert_ids_to_tokens(input_ids)

    # Filter out special tokens and labels with -100
    clean = [(tok, lbl) for tok, lbl in zip(tokens, labels) if lbl != -100]
    if not clean:
        continue

    tokens_filtered, labels_filtered = zip(*clean)
    label_names = [id_to_label[lbl] for lbl in labels_filtered]

    for tok, lbl in zip(tokens_filtered, labels_filtered):
        token_freq[tok] += 1
        token_label_map[tok][lbl] += 1

    label_sequences.add(tuple(label_names))
    for i in range(len(label_names) - 1):
        label_ngrams[(label_names[i], label_names[i + 1])] += 1

    sequence_lengths.append(len(label_names))

# Compute stats
total_tokens = sum(token_freq.values())
token_entropy = -sum((freq / total_tokens) * math.log2(freq / total_tokens) for freq in token_freq.values())

total_unique_tokens = len(token_label_map)
rigid_tokens = sum(1 for labels in token_label_map.values() if len(labels) == 1)
rigid_ratio = rigid_tokens / total_unique_tokens if total_unique_tokens else 0

unique_seq_ratio = len(label_sequences) / len(dataset)
avg_seq_len = np.mean(sequence_lengths)

# Summary
summary = pd.DataFrame([{
    "Token Entropy": round(token_entropy, 4),
    "Total Unique Tokens": total_unique_tokens,
    "Tokens with One Label Only": rigid_tokens,
    "Token-Label Rigidity Ratio": round(rigid_ratio, 4),
    "Unique Label Sequence Ratio": round(unique_seq_ratio, 4),
    "Average Sequence Length": round(avg_seq_len, 2)
}])

# Show summary
from IPython.display import display
display(summary)

# Optional: top label bigrams
print("\nTop 10 frequent label bigrams:")
for bigram, count in label_ngrams.most_common(10):
    print(f"{bigram}: {count}")
