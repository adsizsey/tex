import torch
import matplotlib.pyplot as plt
from tqdm import tqdm

# Assumes you already have test_dataset, model, tokenizer, id_to_label
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)
model.eval()

thresholds = list(range(50, 101, 10))  # 50% to 100%
correct_ratios = {t: [] for t in thresholds}

for i in tqdm(range(len(test_dataset))):
    batch = test_dataset[i]
    input_ids = torch.tensor(batch["input_ids"]).unsqueeze(0).to(device)
    attention_mask = torch.tensor(batch["attention_mask"]).unsqueeze(0).to(device)
    labels = batch["labels"]

    with torch.no_grad():
        logits = model(input_ids=input_ids, attention_mask=attention_mask).logits
        predictions = torch.argmax(logits, dim=-1).squeeze().tolist()

    # Remove special tokens
    pred_labels = predictions[1:-1]
    true_labels = labels

    # Alignment check
    assert len(pred_labels) == len(true_labels), f"Length mismatch at idx {i}"

    total_valid = sum(1 for l in true_labels if l != -100)
    correct = sum(1 for p, l in zip(pred_labels, true_labels) if l != -100 and p == l)

    if total_valid == 0:
        continue

    percent_correct = 100 * correct / total_valid
    for t in thresholds:
        correct_ratios[t].append(int(percent_correct >= t))

# Compute overall accuracy at each threshold
accuracy_by_threshold = {t: sum(correct_ratios[t]) / len(correct_ratios[t]) for t in thresholds}

# Plot
plt.figure(figsize=(10, 6))
plt.bar([f"{t}%" for t in thresholds], list(accuracy_by_threshold.values()))
plt.xlabel("Minimum % of Tokens Correct per Sample")
plt.ylabel("Proportion of Samples Meeting Threshold")
plt.title("Sample-Level Accuracy vs Thresholds")
plt.ylim(0, 1.05)
plt.grid(axis='y')
plt.tight_layout()
plt.show()
