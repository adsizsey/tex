import random
import re
import numpy as np
import matplotlib.pyplot as plt
from copy import deepcopy

# ========== Perturbation Functions ==========

def misspell_tickers(example):
    text = example["text"]
    if not text:
        return example
    # Randomly misspell a word labeled as Ticker (if any)
    tokens = text.split()
    indices = [i for i, l in enumerate(example['labels']) if id_to_label.get(l, '').endswith("Ticker")]
    if indices:
        i = random.choice(indices)
        word = tokens[i]
        if len(word) > 2:
            tokens[i] = word[0] + word[2:]  # remove 2nd char
        example["text"] = ' '.join(tokens)
    return example

def misspell_numbers(example):
    text = example["text"]
    if not text:
        return example
    tokens = text.split()
    for i, word in enumerate(tokens):
        if word.replace('.', '', 1).isdigit() and len(word) > 1:
            tokens[i] = word[:-1]  # remove last digit
            break
    example["text"] = ' '.join(tokens)
    return example

def insert_words(example):
    text = example["text"]
    if not text:
        return example
    insertables = ["foo", "bar", "hello"]
    tokens = text.split()
    new_tokens = []
    for t in tokens:
        new_tokens.append(t)
        if random.random() < 0.2:
            new_tokens.append(random.choice(insertables))
    example["text"] = ' '.join(new_tokens)
    return example

def combined_all(example):
    example = misspell_tickers(example)
    example = misspell_numbers(example)
    example = insert_words(example)
    return example

# ========== Perturbation Strategy Dictionary ==========

perturbation_strategies = {
    "NoPerturb": lambda x: x,  # identity
    "Misspell_Ticker": misspell_tickers,
    "Misspell_Number": misspell_numbers,
    "Insert_Words": insert_words,
    "Combined_All": combined_all
}

# ========== Apply Perturbations ==========

dataset_by_strategy = {}
for name, perturb_fn in perturbation_strategies.items():
    print(f"[Perturbation] Applying: {name}")
    perturbed_dataset = test_dataset.map(perturb_fn)
    dataset_by_strategy[name] = perturbed_dataset

# ========== Evaluate ==========

results_by_strategy = {}
for strategy_name, dataset in dataset_by_strategy.items():
    print(f"[Evaluation] Running evaluation for: {strategy_name}")
    result = evaluate_model(
        model=model,
        dataset=dataset,
        tokenizer=tokenizer,
        id_to_label=id_to_label,
        label_to_id=label_to_id,
        strategy_name=strategy_name,
        device=device
    )
    results_by_strategy[strategy_name] = result

# ========== Plotting ==========

metrics_to_plot = [
    'token_accuracy', 'token_precision', 'token_recall', 'token_f1',
    'sample_50', 'sample_60', 'sample_70', 'sample_80', 'sample_90', 'sample_100',
    'word_level_accuracy'
]

for metric in metrics_to_plot:
    values, labels = [], []
    for strategy, result in results_by_strategy.items():
        if metric in result:
            values.append(result[metric])
            labels.append(strategy)
    if values:
        plt.figure(figsize=(8, 4))
        plt.bar(labels, values)
        plt.title(f"{metric.replace('_', ' ').title()} Across Perturbation Strategies")
        plt.ylabel("Score")
        plt.xticks(rotation=30)
        plt.ylim(0, 1)
        plt.tight_layout()
        plt.grid(axis="y", linestyle="--", alpha=0.4)
        plt.show()
